// Generated by CoffeeScript 1.6.3
(function() {
  var AdminRoute, DbDal, NameCandidate, NameSrc, async, should, util, _;

  _ = require('underscore');

  async = require('async');

  util = require('util');

  should = require('should');

  DbDal = require('../dal/DbDal');

  NameCandidate = DbDal.NameCandidate;

  NameSrc = DbDal.NameSrc;

  module.exports = AdminRoute = (function() {
    function AdminRoute(app) {
      this.app = app;
    }

    AdminRoute.prototype.addRequestHandlers = function() {
      this.app.get('/admin', _.bind(this.handleIndex, this));
      this.app.post('/admin/clearDB', _.bind(this.handleAjaxClearDB, this));
      this.app.post('/admin/autoGenNames', _.bind(this.handleAjaxAutoGenNames, this));
      this.app.post('/admin/batchAddNames', _.bind(this.handleAjaxBatchAddNames, this));
      this.app.post('/admin/queryFilteredNames', _.bind(this.handleQueryFilteredNames, this));
      return this.app.post('/admin/delPreviewedNames', _.bind(this.handleAjaxClearDB, this));
    };

    AdminRoute.prototype.handleIndex = function(req, res) {
      return res.render("page_admin_index");
    };

    AdminRoute.prototype.handleAjaxClearDB = function(req, res) {
      return this.__dropTables(function(err) {
        if (err) {
          return res.json(500);
        } else {
          return res.json(200);
        }
      });
    };

    AdminRoute.prototype.handleAjaxAutoGenNames = function(req, res) {
      var secondWordString, thirdWordString, _ref;
      _ref = req.body, secondWordString = _ref.secondWordString, thirdWordString = _ref.thirdWordString;
      should.exist(secondWordString, "Query parameter 'req.body.secondWordString' cannot be null");
      should.exist(thirdWordString, "Query parameter 'req.body.thirdWordString' cannot be null");
      return this.__generateCandidateNames(secondWordString, thirdWordString, function(err) {
        if (err) {
          return res.json(500);
        } else {
          return res.json(200);
        }
      });
    };

    AdminRoute.prototype.handleAjaxBatchAddNames = function(req, res) {
      var names;
      names = req.body.names;
      should.exist(names, "Query parameter 'req.body.names' cannot be null");
      return this.__batchAddNames(names, function(err) {
        if (err) {
          return res.json(500);
        } else {
          return res.json(200);
        }
      });
    };

    AdminRoute.prototype.handleQueryFilteredNames = function(req, res) {
      var conditions, filter, filters;
      filters = req.body.filters;
      should.exist(filters, "Query parameter 'req.body.filters' cannot be null");
      if (filters === '') {
        conditions = [true];
      } else {
        conditions = (function() {
          var _i, _len, _ref, _results;
          _ref = filters.split(",");
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            filter = _ref[_i];
            if (filter !== '') {
              _results.push({
                name: new RegExp("" + filter)
              });
            }
          }
          return _results;
        })();
      }
      return NameCandidate.find({
        "$or": conditions
      }, function(err, entities) {
        if (err) {
          return res.json(500);
        } else {
          return res.json(200, entities);
        }
      });
    };

    AdminRoute.prototype.__dropTables = function(cb) {
      var clearTableRoutins;
      clearTableRoutins = [
        function(cb) {
          return NameCandidate.remove({}, cb);
        }, function(cb) {
          return NameSrc.remove({}, cb);
        }
      ];
      return async.parallel(clearTableRoutins, cb);
    };

    AdminRoute.prototype.__generateCandidateNames = function(secondWordString, thirdWordString, cb) {
      var namesrc;
      should.exist(secondWordString, "Parameter 'secondWordString' cannot be null");
      should.exist(thirdWordString, "Parameter 'thirdWordString' cannot be null");
      namesrc = new NameSrc();
      namesrc.secondWordList = secondWordString.split('');
      namesrc.thirdWordList = thirdWordString.split('');
      return async.parallel([
        function(cb) {
          return namesrc.save(cb);
        }, function(cb) {
          var candidates, iterator;
          candidates = _.uniq(namesrc.genNameCandidates());
          iterator = function(name, callback) {
            var nameCandidate;
            nameCandidate = new NameCandidate();
            nameCandidate.name = name;
            if (nameCandidate.validateAndFormat()) {
              return NameCandidate.saveIfNotExists(nameCandidate, callback);
            } else {
              return callback(null);
            }
          };
          return async.each(candidates, iterator, cb);
        }
      ], cb);
    };

    AdminRoute.prototype.__batchAddNames = function(names, cb) {
      var iterator;
      should.exist(names, "Parameter 'names' cannot be null");
      iterator = function(name, callback) {
        var nameCandidate;
        nameCandidate = new NameCandidate();
        nameCandidate.name = name;
        if (nameCandidate.validateAndFormat()) {
          return NameCandidate.saveIfNotExists(nameCandidate, callback);
        } else {
          return callback(null);
        }
      };
      return async.each(names.split(","), iterator, cb);
    };

    return AdminRoute;

  })();

}).call(this);
