// Generated by CoffeeScript 1.6.3
(function() {
  var DbDal, NameCandidate, NameRoute, NameSrc, async, util, _;

  _ = require('underscore');

  async = require('async');

  util = require('util');

  DbDal = require('../dal/DbDal');

  NameCandidate = DbDal.NameCandidate;

  NameSrc = DbDal.NameSrc;

  module.exports = NameRoute = (function() {
    function NameRoute(app) {
      this.app = app;
    }

    NameRoute.prototype.addRequestHandlers = function() {
      this.app.get('/', _.bind(this.handleIndex, this));
      this.app.get('/voter/login', _.bind(this.handleVotorLogin, this));
      this.app.get('/:voter/vote', _.bind(this.handleVoterVote, this));
      return this.app.get('/:voter/voteFor', _.bind(this.handleVoterVoteFor, this));
    };

    NameRoute.prototype.handleIndex = function(req, res) {
      return res.redirect(301, "/voter/login");
    };

    NameRoute.prototype.handleVotorLogin = function(req, res) {
      var voters;
      voters = [
        {
          displayName: '熊猫'
        }, {
          displayName: '云'
        }, {
          displayName: '一苇渡江'
        }
      ];
      return res.render('page_voter_login', {
        voters: voters
      });
    };

    NameRoute.prototype.handleVoterVote = function(req, res) {
      var voter;
      voter = req.params.voter;
      return this.__getCandidateNamesFromDb(voter, function(err, results) {
        return res.render('page_voter_vote.ejs', {
          voter: voter,
          nameCandidates: results
        });
      });
    };

    NameRoute.prototype.handleVoterVoteFor = function(req, res) {
      var id, queryClouse, score, updateClouse, voter, _ref,
        _this = this;
      voter = req.params.voter;
      _ref = req.query, id = _ref.id, score = _ref.score;
      queryClouse = {
        _id: id
      };
      updateClouse = {};
      updateClouse["votes." + voter] = parseInt(score, 10);
      return NameCandidate.findOneAndUpdate(queryClouse, updateClouse, function(err, numberAffected) {
        if (err) {
          return res.send(500, err);
        } else {
          console.log(numberAffected);
          return res.json(200, numberAffected);
        }
      });
    };

    NameRoute.prototype.__getCandidateNamesFromDb = function(voter, cb) {
      return NameCandidate.find(null, null, {
        sort: {
          name: 1
        }
      }, function(err, docs) {
        var name, results, score, simpleName, _i, _len, _ref;
        results = {
          preferred: [],
          disliked: [],
          pending: [],
          unvoted: []
        };
        for (_i = 0, _len = docs.length; _i < _len; _i++) {
          name = docs[_i];
          score = (_ref = name.votes) != null ? _ref[voter] : void 0;
          simpleName = _.pick(name, '_id', 'name');
          if (score === void 0) {
            results.unvoted.push(simpleName);
          } else {
            if (score > 0) {
              results.preferred.push(simpleName);
            } else if (score < 0) {
              results.disliked.push(simpleName);
            } else {
              results.pending.push(simpleName);
            }
          }
        }
        return cb(null, results);
      });
    };

    return NameRoute;

  })();

}).call(this);
