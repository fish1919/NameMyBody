// Generated by CoffeeScript 1.6.3
(function() {
  var MongoDB, NameCandidateSchema, NameSrcSchema, Schema, mongoose, should, _;

  _ = require('underscore');

  should = require('should');

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  NameSrcSchema = new mongoose.Schema({
    secondWordList: [String],
    thirdWordList: [String]
  });

  NameSrcSchema.method("genNameCandidates", function() {
    var midWord, nameCandidates, thirdWord, _i, _j, _len, _len1, _ref, _ref1;
    nameCandidates = [];
    _ref = this.secondWordList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      midWord = _ref[_i];
      _ref1 = this.thirdWordList;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        thirdWord = _ref1[_j];
        nameCandidates.push('冯' + midWord + thirdWord);
      }
    }
    return nameCandidates;
  });

  NameCandidateSchema = new mongoose.Schema({
    name: String,
    votes: Schema.Types.Mixed
  });

  NameCandidateSchema.method("validateAndFormat", function() {
    if (!this.name || this.name === '') {
      return false;
    }
    if (!this.name[0] === "冯") {
      this.name = "冯" + this.name;
    }
    return true;
  });

  NameCandidateSchema["static"]("saveIfNotExists", function(entity, cb) {
    var conditions;
    should.exist(entity, "Parameter 'entity' cannot be null.");
    should.exist(entity.name, "Parameter 'entity.name' cannot be null.");
    conditions = _.pick(entity, "name");
    return this.findOne(conditions, function(err, result) {
      if (err) {
        return cb(err, result);
      } else {
        if (!result) {
          return entity.save(cb);
        } else {
          return cb(null, result);
        }
      }
    });
  });

  exports.NameSrc = mongoose.model('name_src', NameSrcSchema);

  exports.NameCandidate = mongoose.model('name_candidate', NameCandidateSchema);

  exports.MongoDB = MongoDB = (function() {
    function MongoDB() {}

    MongoDB.prototype.connect = function() {
      var env, mongo, mongoUrl;
      if (process.env.VCAP_SERVICES) {
        env = JSON.parse(process.env.VCAP_SERVICES);
        mongo = env['mongodb-1.8'][0]['credentials'];
      } else {
        mongo = {
          "hostname": "localhost",
          "port": 27017,
          "username": "",
          "password": "",
          "name": "",
          "db": "NameMyBaby"
        };
      }
      if (mongo.username && mongo.password) {
        mongoUrl = "mongodb://" + mongo.username + ":" + mongo.password + "@" + mongo.hostname + ":" + mongo.port + "/" + mongo.db;
      } else {
        mongoUrl = "mongodb://" + mongo.hostname + ":" + mongo.port + "/" + mongo.db;
      }
      return mongoose.connect(mongoUrl);
    };

    return MongoDB;

  })();

}).call(this);
